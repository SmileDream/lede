#
# This is free software, lisence use MIT.
# 
# Copyright (C) 2019 P3TERX <https://p3terx.com>
# Copyright (C) 2020 KFERMercer <KFER.Mercer@gmail.com>
# 
# <https://github.com/KFERMercer/OpenWrt-CI>
#

name: OpenWrt-CI

on:
  push:
    branches: 
      - master
  # schedule:
  #   - cron: 0 20 * * *
  release:
    types: [published]

jobs:

  build_openwrt:

    name: Build OpenWrt firmware

    runs-on: ubuntu-latest

    if: github.event.repository.owner.id == github.event.sender.id

    steps:

      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master

      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php* android*
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf swig libtinfo5
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          # sudo mkdir -p -m 777 /mnt/openwrt/bin /mnt/openwrt/build_dir/host /mnt/openwrt/build_dir/hostpkg /mnt/openwrt/dl /mnt/openwrt/feeds /mnt/openwrt/staging_dir
          # ln -s /mnt/openwrt/bin ./bin
          # mkdir -p ./build_dir
          # ln -s -f /mnt/openwrt/build_dir/host ./build_dir/host
          # ln -s -f /mnt/openwrt/build_dir/hostpkg ./build_dir/hostpkg
          # ln -s /mnt/openwrt/dl ./dl
          # ln -s /mnt/openwrt/feeds ./feeds
          # ln -s /mnt/openwrt/staging_dir ./staging_dir
          df -h
      - name: Update feeds
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a
      - name: Generate configuration file
        run: |
          rm -f ./.config*
          touch ./.config
          #
          # ------------------------------------《编译选项》
          cat >> .config <<EOF
          # x64固件
          CONFIG_TARGET_x86=y
          CONFIG_TARGET_x86_64=y
          CONFIG_TARGET_x86_64_Generic=y
          # Root filesystem partition size (in MB)
          CONFIG_TARGET_ROOTFS_PARTSIZE=300
          # UEFI固件
          # CONFIG_EFI_IMAGES=y
          # 固件压缩
          CONFIG_TARGET_IMAGES_GZIP=y
          EOF

          # Hardening build options
          # cat >> .config <<EOF
          # CONFIG_TARGET_PREINIT_IP="10.10.10.10"
          # EOF

          # ------------------------------------《IPv6支持》
          cat >> .config <<EOF
          # IPv6支持和相关的软件包
          # CONFIG_IPV6=y
          CONFIG_PACKAGE_dnsmasq_full_dhcpv6=y
          CONFIG_PACKAGE_ipv6helper=y
          EOF

          # ------------------------------------《文件系统》
          cat >> .config <<EOF
          # Ext4
          CONFIG_PACKAGE_kmod-fs-ext4=y
          # SquashFS 压缩只读文件系统
          CONFIG_PACKAGE_kmod-fs-squashfs=y
          # NTFS 只读
          # CONFIG_PACKAGE_kmod-fs-ntfs=y
          # NTFS-3G 用户层(fuseblk)读写
          # CONFIG_PACKAGE_ntfs-3g=y
          # FAT32（vfat）
          CONFIG_PACKAGE_kmod-fs-vfat=y
          CONFIG_PACKAGE_kmod-fs-exfat=y
          # NFS
          # CONFIG_PACKAGE_kmod-fs-nfs=y
          # CONFIG_PACKAGE_kmod-fs-nfs-common=y
          # CONFIG_PACKAGE_kmod-fs-nfs-v3=y
          # CONFIG_PACKAGE_kmod-fs-nfs-v4=y
          EOF

          # ------------------------------------《USB和大容量存储设备支持》
          cat >> .config <<EOF
          CONFIG_PACKAGE_kmod-usb-ohci=y
          # CONFIG_PACKAGE_kmod-usb-ohci-pci=y
          CONFIG_PACKAGE_kmod-usb2=y
          # CONFIG_PACKAGE_kmod-usb2-pci=y
          CONFIG_PACKAGE_kmod-usb3=y
          CONFIG_PACKAGE_kmod-usb-storage=y
          CONFIG_PACKAGE_kmod-usb-storage-uas=y
          EOF

          # ------------------------------------《常用LuCI插件》
          cat >> .config <<EOF
          # USB 打印服务器
          CONFIG_PACKAGE_luci-app-usb-printer=y
          # 硬盘休眠
          CONFIG_PACKAGE_luci-app-hd-idle=y
          # DiskMan磁盘管理
          CONFIG_PACKAGE_luci-app-diskman=y
          CONFIG_PACKAGE_kmod-dm-raid=y

          # TTYD终端
          CONFIG_PACKAGE_luci-app-ttyd=y
          # 挂载SMB/CIFS网络共享文件夹
          # CONFIG_PACKAGE_luci-app-cifs-mount=y
          # 多线多拨
          CONFIG_PACKAGE_luci-app-syncdial=y
          # Frp 内网穿透
          # CONFIG_PACKAGE_luci-app-frpc=y
          # OpenVPN
          CONFIG_PACKAGE_luci-app-openvpn=y
          CONFIG_PACKAGE_luci-app-openvpn-server=y
          # Transmission
          CONFIG_PACKAGE_luci-app-transmission=y
          # qBittorrent
          # CONFIG_PACKAGE_luci-app-qbittorrent=y
          # Aria2
          # CONFIG_PACKAGE_luci-app-aria2=y
          # PassWall
          CONFIG_PACKAGE_luci-app-passwall=y
          # Clash
          # CONFIG_PACKAGE_luci-app-clash=y
          # OpenClash
          CONFIG_PACKAGE_luci-app-openclash=y
          # Vssr HelloWorld
          CONFIG_PACKAGE_luci-app-vssr=y
          # NaiveProxy
          # CONFIG_PACKAGE_naiveproxy=y
          # 应用过滤
          CONFIG_PACKAGE_luci-app-oaf=y
          # Lienol 上网时间控制
          # CONFIG_PACKAGE_luci-luci-app-control-timewol=y
          # Lienol 访问限制
          CONFIG_PACKAGE_luci-app-control-webrestriction=y
          # Lienol 文件助手
          # CONFIG_PACKAGE_luci-app-fileassistant=y
          # 高级设置
          CONFIG_PACKAGE_luci-app-advancedsetting=y
          # SQM QoS 智能队列管理
          CONFIG_PACKAGE_luci-app-sqm=y
          # EQoS 网速控制
          CONFIG_PACKAGE_luci-app-eqos=y
          # QoS
          CONFIG_PACKAGE_luci-app-qos=y
          # MentoHUST Linux/MacOS 平台的锐捷认证客户端
          # CONFIG_PACKAGE_luci-app-mentohust=y
          EOF

          # ------------------------------------《LuCI主题》
          cat >> .config <<EOF
          CONFIG_PACKAGE_luci-theme-rosy=y
          CONFIG_PACKAGE_luci-theme-argon=y
          EOF

          # ------------------------------------《常用软件包》
          cat >> .config <<EOF
          CONFIG_PACKAGE_nano=y
          # USB工具集合包含：lsusb
          CONFIG_PACKAGE_usbutils=y
          # CONFIG_PACKAGE_screen=y
          # CONFIG_PACKAGE_tree=y
          # CONFIG_PACKAGE_htop=y
          # CONFIG_PACKAGE_vim-fuller=y
          # CONFIG_PACKAGE_curl=y
          # CONFIG_PACKAGE_wget=y
          # CONFIG_PACKAGE_shadow-utils=y
          EOF
          
          # ------------------------------------《Disk 磁盘工具》
          cat >> .config <<EOF
          CONFIG_PACKAGE_blkid=y
          CONFIG_PACKAGE_fdisk=y
          CONFIG_PACKAGE_cfdisk=y
          CONFIG_PACKAGE_hdparm=y
          CONFIG_PACKAGE_lsblk=y
          EOF

          # ------------------------------------《关闭默认选项》
          cat >> .config <<EOF
          # 取消编译VMware镜像以及镜像填充
          # CONFIG_VMDK_IMAGES is not set
          # CONFIG_TARGET_IMAGES_PAD is not set
          # ShadowSocksR Plus+
          # CONFIG_DEFAULT_luci-app-ssr-plus is not set
          # 广告屏蔽大师Plus+
          # CONFIG_PACKAGE_luci-app-adbyby-plus is not set
          # 京东签到服务
          # CONFIG_PACKAGE_luci-app-jd-dailybonus is not set
          # 解锁网易云灰色歌曲
          # # CONFIG_PACKAGE_luci-app-unblockmusic is not set
          # UU游戏加速器
          # # CONFIG_DEFAULT_luci-app-uugamebooster is not set
          # 迅雷快鸟
          # CONFIG_PACKAGE_luci-app-xlnetacc is not set
          # 网络共享 Samba
          # # CONFIG_PACKAGE_luci-app-samba is not set
          # 网络唤醒
          # CONFIG_DEFAULT_luci-app-wol is not set
          # FTP 服务器
          # CONFIG_PACKAGE_luci-app-vsftpd is not set
          # KMS 服务器
          # CONFIG_PACKAGE_luci-app-vlmcsd is not set
          # IPSec VPN 服务器
          # CONFIG_PACKAGE_luci-app-ipsec-vpnd is not set
          # ZeroTier 内网穿透
          # CONFIG_PACKAGE_luci-app-zerotier is not set
          EOF

          # ===============================================================

          sed -i 's/^[ \t]*//g' ./.config
          make defconfig
      - name: Make download
        run: |
          make download -j8 || make download -j1 V=s
          rm -rf $(find ./dl/ -size -1024c)
          df -h
      - name: Compile firmware
        run: |
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h ./ --max-depth=1
          du -h /mnt/openwrt/ --max-depth=1 || true
      - name: Prepare artifact
        run: |
          mkdir -p ./artifact/firmware
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/targets/ -type f) ./artifact/firmware/
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/
      - name: Deliver buildinfo
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_buildinfo
          path: ./artifact/buildinfo/

      - name: Deliver package
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_package
          path: ./artifact/package/

      - name: Deliver firmware
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_firmware
          path: ./bin/targets/

      - name: Upload release asset
        if: github.event == 'release'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.YOURTOKEN }}
          file: ./artifact/firmware/*
          tag: ${{ github.ref }}
          file_glob: true
